#!/usr/bin/env node

var cmd = require('commander')
  , prompt = require('cli-prompt')
  , kafs = require('../')

cmd
  .version(require('../package.json').version)
  .description(require('../package.json').description)
  .option('-k, --keyring <dir>', 'path to keyring volume (default: ~/.kafs/_keyring or env.KAFS_KEYRING)')
  .option('-v, --volume <path>', 'volume path (default: ~/.kafs/default or env.KAFS_VOLUME)')

cmd
  .command('init <path>')
  .description('create a new volume at the given path')
  .action(setup(function (path, opts) {
    console.log('init!', path);
  }))

cmd
  .command('info')
  .description('get info about the volume')
  .action(setup(function (opts) {
    console.log('info!', path);
  }))

cmd
  .command('write <path>')
  .description('write a file to the volume')
  .option('-f, --file <src>', 'read from file path. if not specified, will read STDIN')
  .option('-c, --create', 'will error if path already exists')
  .action(setup(function (path, opts) {
    console.log('write!', path);
  }))

cmd
  .command('cat <path>')
  .description('output the contents of a virtual file')
  .action(setup(function (path, opts) {
    console.log('cat!', path);
  }))

cmd
  .command('rm <path>')
  .description('remove virtual file from volume')
  .action(setup(function (path, opts) {
    console.log('rm!', path);
  }))

cmd
  .command('touch <path>')
  .description('touch the path')
  .action(setup(function (path, opts) {
    console.log('touch!', path);
  }))

cmd
  .command('stat <path>')
  .option('-f, --file', 'check for a virtual file')
  .option('-d, --dir', 'check for a virtual directory')
  .option('-t, --test', 'return 0 if virtual file/dir exists, 1 otherwise')
  .action(setup(function (path, opts) {
    console.log('stat!', path);
  }))

cmd
  .command('export <dest>')
  .description('export the volume contents to new directory')
  .option('--exclude <glob>', 'exclude paths matching glob')
  .option('--include <glob>', 'include paths matching glob')
  .action(setup(function (dest, opts) {
    console.log('export!', dest);
  }))

cmd
  .command('import <src>')
  .description('import the contents of a directory into the volume')
  .option('--exclude <glob>', 'exclude paths matching glob')
  .option('--include <glob>', 'include paths matching glob')
  .action(setup(function (src, opts) {
    console.log('import!', src);
  }))

cmd
  .command('mount [src] <dest>')
  .description('mount the volume')
  .option('-r, --readonly', 'mount read-only')
  .action(setup(function (src, dest, opts) {
    console.log('mount!', src, dest);
  }))

cmd
  .command('server')
  .description('expose volume via HTTP server')
  .option('-p, --port', 'port to listen on')
  .option('-r, --root', 'virtual root path')
  .action(setup(function (opts) {
    console.log('server!');
  }))

cmd
  .command('destroy')
  .description('destroy the volume')
  .option('-f, --force', 'force destruction without prompting')
  .action(setup(function (opts) {
    console.log('destroy!');
  }))

cmd
  .command('add-key <key>')
  .description('add a key to the keyring. will read STDIN if no argument specified.')
  .action(setup(function (arg, opts) {
    console.log('add-key!');
  }))

cmd
  .command('check-key <id>')
  .description('returns 0 if the keyring has the key, 1 otherwise')
  .action(setup(function (id, opts) {
    console.log('check-key!');
  }))

var volume;

kafs.env.detect();
cmd.parse(process.argv);

if (typeof cmd.args[0] === 'string' && !cmd.listeners(cmd.args[0]).length) cmd.help();
if (!cmd.args.length) {
  setup(function () {
    cmd.help();
  })(cmd);
}

function setup (cb) {
  return function () {
    var args = arguments
      , opts = args[args.length - 1]

    switch (opts._name) {
      case 'init':
        // init a new volume
        break;
      case 'add-key': case 'check-key':
        // check keys volume
        process.env.KAFS_VOLUME = process.env.KAFS_KEYRING;
      default:
        // load volume
        kafs.load(process.env.KAFS_VOLUME, {keyring: process.env.KAFS_KEYRING}, function (err, vol) {
          if (err && err.path && err.path.match(/keyring/)) {
            prompt("Looks like you haven't set up a keyring yet. Set one up now? (y) ", function (resp) {
              if (resp.match(/^(y.*|$)/i)) {
                prompt('Enter a password to protect the keyring with (optional): ', true, function (password) {
                  kafs.volume.init(process.env.KAFS_KEYRING, {keypair: true, password: password || null}, function (err, keyring) {
                    if (err) throw err;
                    kafs.volume.init(process.env.KAFS_VOLUME, function (err, vol) {
                      if (err) throw err;
                      console.log('Created new keyring: ' + keyring.fingerprint);
                    });
                  });
                });
              }
              else {
                console.error('Cancelling.');
                process.exit(1);
              }
            });
            return;
          }
          else throw err;
          if (err) return cb(err);
          volume = vol;
          action();
        });
    }

    function action () {
      cb.apply(null, args);
    }
  };
}