#!/usr/bin/env node

var cmd = require('commander')
  , kafs = require('../')

cmd
  .version(require('../package.json').version)
  .description(require('../package.json').description)
  .option('-k, --keys <dir>', 'path to key volume (default: ~/.kafs/keys or env.KAFS_KEYS)')
  .option('-v, --volume <path>', 'volume path (default: "~/.kafs/default" or env.KAFS_VOLUME)')

cmd
  .command('init <path>')
  .description('create a new volume at the given path')
  .option('-p, --password', 'protect the private key with a password')
  .option('--depth <depth>', 'partition the data into directories of given depth (default: 3)', Number, 3)
  .action(setup(function (path, opts) {
    console.log('init!', path);
  }))

cmd
  .command('info')
  .description('get info about the volume')
  .action(setup(function (opts) {
    console.log('info!', path);
  }))

cmd
  .command('write <path>')
  .description('write a file to the volume')
  .option('-f, --file <src>', 'read from file path. if not specified, will read STDIN')
  .option('-c, --create', 'will error if path already exists')
  .action(setup(function (path, opts) {
    console.log('write!', path);
  }))

cmd
  .command('cat <path>')
  .description('output the contents of a virtual file')
  .action(setup(function (path, opts) {
    console.log('cat!', path);
  }))

cmd
  .command('rm <path>')
  .description('remove virtual file from volume')
  .action(setup(function (path, opts) {
    console.log('rm!', path);
  }))

cmd
  .command('touch <path>')
  .description('touch the path')
  .action(setup(function (path, opts) {
    console.log('touch!', path);
  }))

cmd
  .command('stat <path>')
  .option('-f, --file', 'check for a virtual file')
  .option('-d, --dir', 'check for a virtual directory')
  .option('-t, --test', 'return 0 if virtual file/dir exists, 1 otherwise')
  .action(setup(function (path, opts) {
    console.log('stat!', path);
  }))

cmd
  .command('export <dest>')
  .description('export the volume contents to new directory')
  .option('--exclude <glob>', 'exclude paths matching glob')
  .option('--include <glob>', 'include paths matching glob')
  .action(setup(function (dest, opts) {
    console.log('export!', dest);
  }))

cmd
  .command('import <src>')
  .description('import the contents of a directory into the volume')
  .option('--exclude <glob>', 'exclude paths matching glob')
  .option('--include <glob>', 'include paths matching glob')
  .action(setup(function (src, opts) {
    console.log('import!', src);
  }))

cmd
  .command('mount [src] <dest>')
  .description('mount the volume')
  .option('-r, --readonly', 'mount read-only')
  .action(setup(function (src, dest, opts) {
    console.log('mount!', src, dest);
  }))

cmd
  .command('server')
  .description('expose volume via HTTP server')
  .option('-p, --port', 'port to listen on')
  .option('-r, --root', 'virtual root path')
  .action(setup(function (opts) {
    console.log('server!');
  }))

cmd
  .command('destroy')
  .description('destroy the volume')
  .option('-f, --force', 'force destruction without prompting')
  .action(setup(function (opts) {
    console.log('destroy!');
  }))

cmd
  .command('add-key <key>')
  .description('add a key to the keys volume. will read STDIN if no argument specified.')
  .option('--format <format>', 'specify key format')
  .action(setup(function (arg, opts) {
    console.log('add-key!');
  }))

cmd
  .command('check-key <id>')
  .description('returns 0 if the keys volume has the key, 1 otherwise')
  .action(setup(function (id, opts) {
    console.log('check-key!');
  }))

cmd.parse(process.argv);
if (!cmd.args[0]) cmd.outputHelp();

function setup (cb) {
  return function () {
    var args = arguments
      , opts = args[args.length - 1]



    switch (opts._name) {
      case 'init':
        // no volume exists yet
        break;
      case 'add-key': case 'check-key':
        // check keys volume
        break;
      default:
        // load volume
        kafs.load(opts.volume, 
    }

    function action () {
      cb.apply(null, args);
    }
  };
}